// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: player_log.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const lastSearched = `-- name: LastSearched :one
SELECT search_time FROM player_search_log WHERE player_id = $1 ORDER BY search_time DESC LIMIT 1
`

func (q *Queries) LastSearched(ctx context.Context, playerID string) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, lastSearched, playerID)
	var search_time pgtype.Timestamp
	err := row.Scan(&search_time)
	return search_time, err
}

const logPlayerSearch = `-- name: LogPlayerSearch :exec
INSERT INTO player_search_log (player_id, search_time) VALUES ($1, $2) RETURNING id
`

type LogPlayerSearchParams struct {
	PlayerID   string
	SearchTime pgtype.Timestamp
}

func (q *Queries) LogPlayerSearch(ctx context.Context, arg LogPlayerSearchParams) error {
	_, err := q.db.Exec(ctx, logPlayerSearch, arg.PlayerID, arg.SearchTime)
	return err
}

const playerHasBeenSearched = `-- name: PlayerHasBeenSearched :one
SELECT EXISTS(SELECT 1 FROM player_search_log WHERE player_id = $1)
`

func (q *Queries) PlayerHasBeenSearched(ctx context.Context, playerID string) (bool, error) {
	row := q.db.QueryRow(ctx, playerHasBeenSearched, playerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
