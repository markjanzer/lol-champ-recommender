// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: champion_stats.sql

package db

import (
	"context"
)

const allChampions = `-- name: AllChampions :many
SELECT id, name, api_id, created_at FROM champions
`

func (q *Queries) AllChampions(ctx context.Context) ([]Champion, error) {
	rows, err := q.db.Query(ctx, allChampions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Champion
	for rows.Next() {
		var i Champion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createChampionStats = `-- name: CreateChampionStats :exec
INSERT INTO champion_stats (data) VALUES ($1)
`

func (q *Queries) CreateChampionStats(ctx context.Context, data []byte) error {
	_, err := q.db.Exec(ctx, createChampionStats, data)
	return err
}

const getLastChampionStats = `-- name: GetLastChampionStats :one
SELECT id, data, created_at FROM champion_stats ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLastChampionStats(ctx context.Context) (ChampionStat, error) {
	row := q.db.QueryRow(ctx, getLastChampionStats)
	var i ChampionStat
	err := row.Scan(&i.ID, &i.Data, &i.CreatedAt)
	return i, err
}
