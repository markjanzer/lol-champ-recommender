// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: champions.sql

package db

import (
	"context"
)

const createChampion = `-- name: CreateChampion :exec
INSERT INTO champions (api_id, name) VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type CreateChampionParams struct {
	ApiID int32
	Name  string
}

func (q *Queries) CreateChampion(ctx context.Context, arg CreateChampionParams) error {
	_, err := q.db.Exec(ctx, createChampion, arg.ApiID, arg.Name)
	return err
}

const getChampionsNotIn = `-- name: GetChampionsNotIn :many
SELECT id, name, api_id, created_at FROM champions WHERE id NOT IN ($1)
`

func (q *Queries) GetChampionsNotIn(ctx context.Context, id int32) ([]Champion, error) {
	rows, err := q.db.Query(ctx, getChampionsNotIn, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Champion
	for rows.Next() {
		var i Champion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
