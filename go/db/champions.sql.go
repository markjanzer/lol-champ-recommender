// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: champions.sql

package db

import (
	"context"
)

const allChampionRiotIDs = `-- name: AllChampionRiotIDs :many
SELECT api_id FROM champions
`

func (q *Queries) AllChampionRiotIDs(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, allChampionRiotIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var api_id int32
		if err := rows.Scan(&api_id); err != nil {
			return nil, err
		}
		items = append(items, api_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allChampions = `-- name: AllChampions :many
SELECT api_id, name FROM champions
`

type AllChampionsRow struct {
	ApiID int32
	Name  string
}

func (q *Queries) AllChampions(ctx context.Context) ([]AllChampionsRow, error) {
	rows, err := q.db.Query(ctx, allChampions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllChampionsRow
	for rows.Next() {
		var i AllChampionsRow
		if err := rows.Scan(&i.ApiID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertChampion = `-- name: UpsertChampion :exec
INSERT INTO champions (api_id, name)
VALUES ($1, $2)
ON CONFLICT (api_id) DO UPDATE SET name = EXCLUDED.name
`

type UpsertChampionParams struct {
	ApiID int32
	Name  string
}

func (q *Queries) UpsertChampion(ctx context.Context, arg UpsertChampionParams) error {
	_, err := q.db.Exec(ctx, upsertChampion, arg.ApiID, arg.Name)
	return err
}
